<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo个人博客搭建（Windows）</title>
      <link href="/2024/07/21/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88Windows%EF%BC%89/"/>
      <url>/2024/07/21/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88Windows%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、git工具安装"><a href="#一、git工具安装" class="headerlink" title="一、git工具安装"></a>一、git工具安装</h2><p>官网：<a href="https://git-scm.com/">Git (git-scm.com)</a></p><p>安装后鼠标右键可以看到就是安装成功了。</p><p><img src="/2024/07/21/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88Windows%EF%BC%89/1.png" alt="1"></p><h2 id="二、node-js安装"><a href="#二、node-js安装" class="headerlink" title="二、node.js安装"></a>二、node.js安装</h2><p>官网：<a href="https://nodejs.org/zh-cn">Node.js — 在任何地方运行 JavaScript (nodejs.org)</a><br>安装后，鼠标右键选择“Open Git Bash here”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v                                                     #查看node版本</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v                                                       #查看npm版本</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org   #安装cnpm</span><br></pre></td></tr></table></figure><p>遇到的问题：npm安装时一直idealTree:npm: sill idealTree buildDeps<br>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry                                   #查看是否安装成功</span><br></pre></td></tr></table></figure><p>然后接着：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli                                    #安装hexo框架 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v                                                     #查看hexo版本</span><br></pre></td></tr></table></figure><h2 id="三、hexo配置和初始化"><a href="#三、hexo配置和初始化" class="headerlink" title="三、hexo配置和初始化"></a>三、hexo配置和初始化</h2><p>然后创建blog目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog                                                     #进入blog目录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init                                              #生成博客 初始化博客</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s                                                    #启动本地博客服务</span><br></pre></td></tr></table></figure><p>本地访问地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，不能访问就输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 4001</span><br></pre></td></tr></table></figure><p>地址就变成：<a href="http://localhost:4001/%EF%BC%8CCrtl+C%E9%80%80%E5%87%BA%E3%80%82">http://localhost:4001/，Crtl+C退出。</a></p><p>这里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;                                        #创建新的文章</span><br></pre></td></tr></table></figure><h2 id="四、Github设置"><a href="#四、Github设置" class="headerlink" title="四、Github设置"></a>四、Github设置</h2><p>在我们的github主页新建一个仓库，名字一定要是：YourGithubName.github.io</p><p>然后在blog目录中找到_config.yml文件，打开它，在最后的部分修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">  deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>（注意缩进两格和冒号后面一格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d                                                 #部署到Github仓库里</span><br></pre></td></tr></table></figure><p>访问这个地址可以查看博客：<a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a></p><p>主题美化：（以yilia为主题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><h3 id="（1）hexo博客中插入图片失败"><a href="#（1）hexo博客中插入图片失败" class="headerlink" title="（1）hexo博客中插入图片失败"></a>（1）hexo博客中插入图片失败</h3><p>1、将<code>_config.yml</code> 文件中的<code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><p>2、typora（Markdown编辑器）图像设置：<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法_hexo 文章插入图片失败-CSDN博客</a></p><p>3、插件下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>4、注意格式：去掉前面的路径</p><p><img src="/2024/07/21/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88Windows%EF%BC%89/2.png" alt="2"></p><h3 id="（2）github上传问题"><a href="#（2）github上传问题" class="headerlink" title="（2）github上传问题"></a>（2）github上传问题</h3><h3 id="Github上传代码及解决main主分支问题-本地分支为main拉代码拉不下来-CSDN博客"><a href="#Github上传代码及解决main主分支问题-本地分支为main拉代码拉不下来-CSDN博客" class="headerlink" title="Github上传代码及解决main主分支问题_本地分支为main拉代码拉不下来-CSDN博客"></a><a href="https://blog.csdn.net/Arcofcosmos/article/details/112862038">Github上传代码及解决main主分支问题_本地分支为main拉代码拉不下来-CSDN博客</a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Comfyui+Docker+Ollama+OpenwebUI笔记</title>
      <link href="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker（windows版本）"><a href="#一、Docker（windows版本）" class="headerlink" title="一、Docker（windows版本）"></a>一、Docker（windows版本）</h2><p>官网：<a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a></p><h2 id="二、Ollama（Llama3为例子）"><a href="#二、Ollama（Llama3为例子）" class="headerlink" title="二、Ollama（Llama3为例子）"></a>二、Ollama（Llama3为例子）</h2><p>官网：<a href="https://ollama.com/">Ollama</a></p><h2 id="三、OpenwebUI"><a href="#三、OpenwebUI" class="headerlink" title="三、OpenwebUI"></a>三、OpenwebUI</h2><h3 id="（1）Github地址："><a href="#（1）Github地址：" class="headerlink" title="（1）Github地址："></a>（1）Github地址：</h3><p><a href="https://github.com/open-webui/open-webui">open-webui&#x2F;open-webui</a></p><h3 id="（2）确保-Ollama-在计算机上"><a href="#（2）确保-Ollama-在计算机上" class="headerlink" title="（2）确保 Ollama 在计算机上"></a>（2）<strong>确保 Ollama 在计算机上</strong></h3><p>请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><h3 id="（3）访问本地的OpenWebUI"><a href="#（3）访问本地的OpenWebUI" class="headerlink" title="（3）访问本地的OpenWebUI"></a>（3）访问本地的OpenWebUI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/</span><br></pre></td></tr></table></figure><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/1.png" alt="1"></p><h2 id="四、Comfyui"><a href="#四、Comfyui" class="headerlink" title="四、Comfyui"></a>四、Comfyui</h2><h3 id="（1）参考教程："><a href="#（1）参考教程：" class="headerlink" title="（1）参考教程："></a>（1）参考教程：</h3><p><a href="https://www.bilibili.com/video/BV1Bi421e73X/?p=3&vd_source=0c4d2c8d0a9190a4bb7587a15f6341f2">2024最新的ConfyUI节点工作流详解</a></p><h3 id="（2）详细理解"><a href="#（2）详细理解" class="headerlink" title="（2）详细理解"></a>（2）详细理解</h3><p>（SD有个webui其实和Comfyui是异曲同工的效果，后者更专注于工作流的形式去完成工作。）</p><p>ComfyUI 是一个为Stable Diffusion专门设计的基于节点的图形用户界面（GUI）。它使用户能够通过链接不同的块（称为节点）来构建复杂的图像生成工作流程。这些节点可以包括各种任务，如加载检查点模型、输入提示、指定采样器等。</p><p>它实际上就是一个比较专业的 Stable Diffusion 运行界面，只不过是节点式的。这种节点式界面其实广泛的存在于各种专业的生产力工具中，例如 Blender、虚幻引擎、达芬奇等。</p><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/2.jpg" alt="2"></p><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p>1）官方安装：Github地址：<a href="https://github.com/comfyanonymous/ComfyUI/releases">Releases · comfyanonymous&#x2F;ComfyUI (github.com)</a></p><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/3.png" alt="3"></p><p>我们在完成安装包下载后，就可以直接运行 ComfyUI 了，双击「run_nvidia_gpu.bat」即可启动。</p><p>2）启动器一键安装：（B站秋叶整合包：<a href="https://www.bilibili.com/video/BV1Ew411776J/?spm_id_from=333.337.search-card.all.click">【AI绘画】ComfyUI整合包发布！解压即用 一键启动 工作流版界面 超多节点 ☆更新 ☆汉化 秋叶整合包_哔哩哔哩_bilibili</a>）</p><p>2、模型安装（\ComfyUI_windows_portable\ComfyUI\models）</p><p>推荐模型网站：1）<a href="https://civitai.com/models">Civitai Models | Discover Free Stable Diffusion Models</a>；2）<a href="https://huggingface.co/models">Models - Hugging Face</a>.</p><p>把下载的模型放到对应的模型类型的目录下即可。</p><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/4.png" alt="4"></p><h4 id="3、共享模型配置参考以上视频"><a href="#3、共享模型配置参考以上视频" class="headerlink" title="3、共享模型配置参考以上视频"></a>3、共享模型配置参考以上视频</h4><h4 id="4、自定义节点设置"><a href="#4、自定义节点设置" class="headerlink" title="4、自定义节点设置"></a>4、自定义节点设置</h4><p>（自定义节点文件都是放在 ComfyUI 的「custom_nodes」目录中）</p><p>1）在线安装在custom_nodes目录下用git clone即可；</p><p>2）<a href="https://github.com/ltdrdata/ComfyUI-Manager">https://github.com/ltdrdata/ComfyUI-Manager</a> 直接本地下载仓库；</p><p>3）启动器安装.</p><h4 id="5、汉化节点安装通过“节点管理器「ComfyUI-Manager」”搜索“translate”来安装，记得用bat重启一次进行更新库。"><a href="#5、汉化节点安装通过“节点管理器「ComfyUI-Manager」”搜索“translate”来安装，记得用bat重启一次进行更新库。" class="headerlink" title="5、汉化节点安装通过“节点管理器「ComfyUI Manager」”搜索“translate”来安装，记得用bat重启一次进行更新库。"></a>5、<strong>汉化节点安装</strong>通过“节点管理器「ComfyUI Manager」”搜索“translate”来安装，记得用bat重启一次进行更新库。</h4><h4 id="6、剩下操作就是ComfyUI-Manager和一些节点、加载器做的文生图、视频多模态的工作流任务了。"><a href="#6、剩下操作就是ComfyUI-Manager和一些节点、加载器做的文生图、视频多模态的工作流任务了。" class="headerlink" title="6、剩下操作就是ComfyUI Manager和一些节点、加载器做的文生图、视频多模态的工作流任务了。"></a>6、剩下操作就是ComfyUI Manager和一些节点、加载器做的文生图、视频多模态的工作流任务了。</h4><h2 id="五、配置OpenwebUI"><a href="#五、配置OpenwebUI" class="headerlink" title="五、配置OpenwebUI"></a>五、配置OpenwebUI</h2><h3 id="（1）Ollama-API"><a href="#（1）Ollama-API" class="headerlink" title="（1）Ollama API"></a>（1）<strong>Ollama API</strong></h3><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/5.png" alt="5"></p><h3 id="（2）关联ComfyUI"><a href="#（2）关联ComfyUI" class="headerlink" title="（2）关联ComfyUI"></a>（2）<strong>关联ComfyUI</strong></h3><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/6.png" alt="6"></p><h3 id="（3）Llama-Comfyui绘制图"><a href="#（3）Llama-Comfyui绘制图" class="headerlink" title="（3）Llama+Comfyui绘制图"></a>（3）Llama+Comfyui绘制图</h3><p><img src="/2024/07/19/Comfyui-Docker-Ollama-OpenwebUI%E7%AC%94%E8%AE%B0/7.png" alt="7"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于YOLOv5m和DeepSORT的智能交通流量监测系统</title>
      <link href="/2024/07/19/YOLOv5+DeepSORT%E7%9A%84%E6%99%BA%E8%83%BD%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/19/YOLOv5+DeepSORT%E7%9A%84%E6%99%BA%E8%83%BD%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Yolov5的环境搭建"><a href="#一、Yolov5的环境搭建" class="headerlink" title="一、Yolov5的环境搭建"></a>一、Yolov5的环境搭建</h2><h2 id="（1）软硬件配置："><a href="#（1）软硬件配置：" class="headerlink" title="（1）软硬件配置："></a>（1）软硬件配置：</h2><p>1）软件配置：</p><p>python版本（3.9.7）+pytorch版本（2.0.0+cu117）+anaconda</p><p>2）硬件配置：Window 10（64位）+Nvidia Geforce 1080ti</p><h2 id="（2）需要安装的包："><a href="#（2）需要安装的包：" class="headerlink" title="（2）需要安装的包："></a>（2）需要安装的包：</h2><p>1）依赖库，用下面命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>2）opencv、torchreid等手动安装，直接pip install xxx即可。</p><h2 id="（3）问题和解决方法："><a href="#（3）问题和解决方法：" class="headerlink" title="（3）问题和解决方法："></a>（3）问题和解决方法：</h2><p>1）遇到报错“UserWarning: Cython evaluation (very fast so highly recommended) is unavailable, now use python evaluation.”</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Cython</span><br></pre></td></tr></table></figure><p>2）遇到报错“AttributeError: module ‘numpy‘ has no attribute ‘float‘“</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 更低版本的numpy(最好是和python版本对应的)</span><br></pre></td></tr></table></figure><p>3）遇到报错no module named “torchreid”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不要pip install torchreid</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/KaiyangZhou/deep-person-reid/archive/master.zip</span><br></pre></td></tr></table></figure><p>遇到网络错误，就直接本地下载，然后pip install；</p><p>遇到C++报错，如下：</p><p><img src="/2024/07/19/YOLOv5+DeepSORT%E7%9A%84%E6%99%BA%E8%83%BD%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/1.png" alt="1"></p><p>解决方法：<a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">Visual Studio 官网地址</a></p><p>勾选”使用C++的桌面开发“这个组件再运行上面的命令就解决了。</p><h2 id="二、代码介绍"><a href="#二、代码介绍" class="headerlink" title="二、代码介绍"></a>二、代码介绍</h2><p>这里介绍修改的内容：（1）main.py；（2）webui.py</p><p>main和webui功能上差别不大，区别在于前者是做程序命令，运行完就没了；后者是一个UI界面，可以一直提交任务。</p><p>整个代码分为detect函数和一个主函数，我改的是detect函数。所以我把detect代码分为这三大块：</p><h3 id="1）初始化代码（包括deepsort模型、数据加载器、追踪器等）；"><a href="#1）初始化代码（包括deepsort模型、数据加载器、追踪器等）；" class="headerlink" title="1）初始化代码（包括deepsort模型、数据加载器、追踪器等）；"></a>1）初始化代码（包括deepsort模型、数据加载器、追踪器等）；</h3><h3 id="2）数据处理（预测、NMS非极大值抑制、检测结果后处理）；"><a href="#2）数据处理（预测、NMS非极大值抑制、检测结果后处理）；" class="headerlink" title="2）数据处理（预测、NMS非极大值抑制、检测结果后处理）；"></a>2）数据处理（预测、NMS非极大值抑制、检测结果后处理）；</h3><p>1、在代码的开头定义一个全局字典，用于存储识别结果和计数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global count_dict</span><br><span class="line">count_dict = &#123;&#125;</span><br></pre></td></tr></table></figure><p>2、对线宽进行增大，可视化更可观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">annotator = Annotator(im0, line_width=10, pil=not ascii)  #标签处理</span><br></pre></td></tr></table></figure><h3 id="3）可视化"><a href="#3）可视化" class="headerlink" title="3）可视化"></a>3）可视化</h3><p>show_vid显示视频参数、save_vid保存视频参数和打印结果，可视化改动比较大，也是主要的任务：</p><p>1、对于show_vid显示视频参数：</p><p>a）动态显示当前检测到的每种类别的数量：</p><pre><code>y_offset = 120for class_name, count in count_dict.items():    cv2.putText(im0, f&#39;&#123;class_name&#125;: &#123;count&#125;&#39;, (10, y_offset), cv2.FONT_HERSHEY_SIMPLEX, 6, (0, 255, 0), 5)    y_offset += 200  </code></pre><p>b）创建一个用于显示的缩放图像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">display_scale_percent = 25  # 调整显示窗口的缩放比例</span><br><span class="line">display_width = int(im0.shape[1] * display_scale_percent / 100)</span><br><span class="line">display_height = int(im0.shape[0] * display_scale_percent / 100)</span><br><span class="line">display_dim = (display_width, display_height)</span><br><span class="line">im0_display = cv2.resize(im0, display_dim, interpolation=cv2.INTER_AREA)</span><br><span class="line">            </span><br><span class="line">cv2.imshow(str(p), im0_display)</span><br><span class="line">cv2.waitKey(1)  # 1 millisecond</span><br></pre></td></tr></table></figure><p>2、对于save_vid保存视频参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># yield imres,im</span><br><span class="line">if vid_path[i] != save_path:  # new video</span><br><span class="line">vid_path[i] = save_path</span><br><span class="line">if isinstance(vid_writer[i], cv2.VideoWriter):</span><br><span class="line">vid_writer[i].release()  # release previous video writer</span><br><span class="line">if vid_cap:  # video</span><br><span class="line">fps = vid_cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">else:  # stream</span><br><span class="line">fps, w, h = 30, im0.shape[1], im0.shape[0]</span><br><span class="line">save_path = str(Path(save_path).with_suffix(&#x27;.mp4&#x27;))  # force *.mp4 suffix on results videos</span><br><span class="line">vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*&#x27;mp4v&#x27;), fps, (w, h))</span><br><span class="line">vid_writer[i].write(im0)</span><br></pre></td></tr></table></figure><p>3、删掉了Count_obj函数。</p><h2 id="三、运行方法"><a href="#三、运行方法" class="headerlink" title="三、运行方法"></a>三、运行方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xxx\Vedio\code\VehicleCountor</span><br><span class="line">python main.py --save-vid --output \xxx\xxx\1\Vedio\code\VehicleCountor\inference\output</span><br></pre></td></tr></table></figure><h2 id="四、项目结果"><a href="#四、项目结果" class="headerlink" title="四、项目结果"></a>四、项目结果</h2><p><img src="/2024/07/19/YOLOv5+DeepSORT%E7%9A%84%E6%99%BA%E8%83%BD%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/2.jpg" alt="1"></p><p><img src="/2024/07/19/YOLOv5+DeepSORT%E7%9A%84%E6%99%BA%E8%83%BD%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/3.jpg" alt="2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS小车的安装---华为杯</title>
      <link href="/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/"/>
      <url>/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>前提提要：测试软件采用minibalance（安卓）、wheeltec（IOS）;蓝牙连接上ROS-STM32，密码是1452.</p><h1 id="一、Ubuntu系统"><a href="#一、Ubuntu系统" class="headerlink" title="一、Ubuntu系统"></a><em>一、Ubuntu系统</em></h1><h2 id="1-双系统安装："><a href="#1-双系统安装：" class="headerlink" title="1. 双系统安装："></a>1. 双系统安装：</h2><p>参考教程：<a href="https://www.bilibili.com/video/BV1554y1n7zv/?spm_id_from=333.999.0.0&vd_source=0c4d2c8d0a9190a4bb7587a15f6341f2"><em>Windows 和 Ubuntu 双系统的安装和卸载</em></a>。</p><p>基本按照教程走，里面用U盘当成启动盘用到的工具采用rufus，使用方法参考视频： <a href="https://www.bilibili.com/video/BV1BP411577g/?vd_source=0c4d2c8d0a9190a4bb7587a15f6341f2">win11下用rufus安装Ubuntu双系统</a>。</p><p>需要注意的是：</p><p>1）Ubuntu这里选择20.04版本，内存至少要60GB；</p><p>2）台式机电脑进入Bios开发者模式（华硕是按F12），需要考虑USB启动（需要插上U盘），没有wifi使用接入网线或者手机数据线连接热点；</p><p>3）rufus工具里选择的文件系统FAT32（方便做介质，拓展性强）。</p><h2 id="2-安装显卡："><a href="#2-安装显卡：" class="headerlink" title="2. 安装显卡："></a>2. 安装显卡：</h2><p>（1）参考教程：<a href="https://www.bilibili.com/video/BV1wY411p7mU/?spm_id_from=333.337.search-card.all.click&vd_source=0c4d2c8d0a9190a4bb7587a15f6341f2"><em>NVIDIA显卡的Ubuntu驱动程序安装方法</em></a>。</p><p>（2）如果出现报错“ERROR: The Nouveau kernel driver is currently in use by your system. This driver is incompatible with the NVIDIA driver。”表示Ubuntu自带的驱动与需要安装的显卡驱动发生冲突，需要禁用。</p><p>1）将nouveau驱动加入黑名单，将以下内容加入&#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim（gedit也可以） /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist rivafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">blacklist nvidiafb</span><br></pre></td></tr></table></figure><p>2）然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启电脑，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>如果没有输出就证明禁用成功<br>3）然后安装显卡驱动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x xxx.run</span><br><span class="line">sudo ./xxx.run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure><p>注意：如果缺少g++，gcc，make等依赖报错，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xxx</span><br></pre></td></tr></table></figure><p>4）安装验证，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>安装后得到的显卡（我们这里是NVIDIA GTX1080Ti）结果如下：</p><p><img src="/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/1.JPG" alt="1"></p><h1 id="二、ROS系统"><a href="#二、ROS系统" class="headerlink" title="二、ROS系统"></a><em>二、ROS系统</em></h1><h2 id="1、学习教程："><a href="#1、学习教程：" class="headerlink" title="1、学习教程："></a>1、学习教程：</h2><p><a href="https://www.bilibili.com/video/BV1BP4y1o7pw/?spm_id_from=333.999.0.0&vd_source=0c4d2c8d0a9190a4bb7587a15f6341f2">机器人操作系统 ROS 快速入门教程</a>。</p><p><img src="/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/2.png" alt="2"></p><p>现在主要是两个机器人系统ROS1和ROS2，每个系统对应的软件操作系统都有不同的版本，两个机器人系统的区别在于ROS1仅支持linux操作系统；而ROS2可以支持windows、linux和macos系统。</p><p>我们以ROS1系统为例子。这里采用的是Ubuntu20.04，所以对应的ROS版本为noetic，具体如下图：</p><p> <img src="/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/3.png" alt="3"></p><h2 id="2、环境部署与安装"><a href="#2、环境部署与安装" class="headerlink" title="2、环境部署与安装"></a>2、环境部署与安装</h2><p>（1）这里我们使用fishros（鱼香）的github项目一键安装ros系统。地址：<a href>https://github.com/fishros/install</a>；</p><p>（2）安装完后可以roscore一下，然后在catkin_ws目录下进catkin_make，如果出现报错，就运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-neotic-缺少库名</span><br></pre></td></tr></table></figure><p>（其他报错问题请转第三点）；</p><p>（3）这里注意一点，我们每次roscore之后，需要做一个额外的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure><p>（这里最好是绝对路径）；</p><p>（4）当我们catkin_make通过以后（可以用小乌龟去验证一下，这里不详细介绍），我们可以选择真实机器人去跑代码（记得连接蓝牙）或者仿真软件去模拟robot，但我们这里采用主从机的分配方式来减少算力运行压力。因此我们这里需要做一个主从机的通信，主机承担人工智能算法的算力（GPU）运算，从机承担简单的控制驱动的执行。参考：<a href="https://blog.csdn.net/zhanghm1995/article/details/106781954">一遍成功的ROS主从机详细配置_一遍成功ros-CSDN博客</a>。</p><p>此项目的主从机IP设置如下：</p><p>台式机电脑作为主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ROS主机的bashrc文件</span><br><span class="line">sudo gedit(或者vim) ~/.bashrc</span><br><span class="line">export ROS_MASTER_URI=http://10.70.26.59:11311</span><br><span class="line">export ROS_HOSTNAME=10.70.26.59</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>STM32开发板作为从机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ROS从机的bashrc文件</span><br><span class="line">sudo gedit(或者vim) ~/.bashrc</span><br><span class="line">export ROS_MASTER_URI=http://10.70.26.59:11311</span><br><span class="line">export ROS_HOSTNAME=10.31.216.89</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>这里记得按照教程去&#x2F;etc&#x2F;hosts里面填写主从机IP地址，以下是主机电脑ssh远程连接从机的实例：</p><p><img src="/2024/07/19/ROS%E5%B0%8F%E8%BD%A6%E7%9A%84%E5%AE%89%E8%A3%85-%E5%8D%8E%E4%B8%BA%E6%9D%AF/4.JPG" alt="4"></p><h2 id="3、遇到的问题及其解决方法"><a href="#3、遇到的问题及其解决方法" class="headerlink" title="3、遇到的问题及其解决方法"></a>3、遇到的问题及其解决方法</h2><p>（1）PermissionError:[Errno 13] Permission dented:’&#x2F;tmp&#x2F;fish_install.yaml’</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo+命令</span><br></pre></td></tr></table></figure><p>（2）编译catkin时遇到错误</p><p>解决方法：<a href="https://blog.csdn.net/qq_42910179/article/details/106881279">ROS学习笔记（四）：编译catkin时遇到的错误经历</a></p><p>（3）-bash: .&#x2F;restart.sh: &#x2F;bin&#x2F;sh^M: 坏的解释器: 没有那个文件或目录</p><p>解决方法：<a href="https://blog.csdn.net/weixin_44310241/article/details/126428617?ops_request_misc=%7B%22request_id%22:%22171998509716800227481633%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171998509716800227481633&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-126428617-null-null.142%5Ev100%5Epc_search_result_base5&utm_term=./sh%E6%89%BE%E4%B8%8D%E5%88%B0%E8%A7%A3%E9%87%8A%E5%99%A8&spm=1018.2226.3001.4187">-bash: .&#x2F;restart.sh: &#x2F;bin&#x2F;sh^M: 坏的解释器: 没有那个文件或目录_</a></p><p>（4）[rospack] Error: package ‘pub_pkg‘ not found</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source devel/setup.bash</span><br></pre></td></tr></table></figure><p>（5）&#x2F;usr&#x2F;bin&#x2F;env: “python3\r”: 没有那个文件或目录</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dos2unix</span><br><span class="line"></span><br><span class="line">dos2unix &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>（6）关于ros版本的库被遗弃或者不存在的情况（这里以orocos-bfl为例子）</p><p>解决方法：首先想好把库放入的文件目录位置（一般是src）</p><p>1、下载github网址的仓库；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">git clone https://github.com/jyLeo/orocos-bfl.git</span><br></pre></td></tr></table></figure><p>2、创建build文件夹；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd src/orocos-bfl</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><p>3、编译安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAK_BUILD_TYPE=Release ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>（7）”catkin_ws“目录下的“installed_packged”文件夹运行“install_packages.sh”脚本文件出现“无法定位软件包”问题</p><p>解决方法：对”install_packages.sh“内容替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 定义日志文件路径</span><br><span class="line">LOG_FILE=&quot;installation.log&quot;</span><br><span class="line"></span><br><span class="line"># 清空日志文件，准备记录新的日志</span><br><span class="line">&gt; &quot;$LOG_FILE&quot;</span><br><span class="line"></span><br><span class="line"># 检查APT更新是否成功</span><br><span class="line">echo &quot;开始更新软件包列表...&quot;</span><br><span class="line">sudo apt-get update &amp;&gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;APT更新失败，请检查网络连接或软件源配置。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 读取包含软件包名称的文件</span><br><span class="line">PACKAGE_LIST=&quot;installed_packages1.txt&quot;</span><br><span class="line"></span><br><span class="line"># 检查包列表文件是否存在</span><br><span class="line">if [ ! -f &quot;$PACKAGE_LIST&quot; ]; then</span><br><span class="line">    echo &quot;包列表文件 $PACKAGE_LIST 不存在。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 读取文件并尝试安装每个软件包</span><br><span class="line">while IFS= read -r package_name; do</span><br><span class="line">    # 清理包名中的不可见字符和多余空格</span><br><span class="line">    cleaned_package_name=$(echo &quot;$package_name&quot; | tr -d &#x27;[:space:]&#x27; | tr -d &#x27;\r\n&#x27;)</span><br><span class="line"></span><br><span class="line">    echo &quot;正在安装软件包: $cleaned_package_name&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">    </span><br><span class="line">    # 执行安装命令</span><br><span class="line">    echo &quot;执行命令: sudo apt-get install $cleaned_package_name -y&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">    if sudo apt-get install &quot;$cleaned_package_name&quot; -y &amp;&gt;&gt; &quot;$LOG_FILE&quot;; then</span><br><span class="line">        echo &quot;软件包 $cleaned_package_name 安装成功!&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;软件包 $cleaned_package_name 安装失败，尝试修复依赖...&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">        # 尝试修复依赖问题</span><br><span class="line">        sudo apt-get -f install &amp;&gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class="line">        if sudo apt-get install &quot;$cleaned_package_name&quot; -y &amp;&gt;&gt; &quot;$LOG_FILE&quot;; then</span><br><span class="line">            echo &quot;软件包 $cleaned_package_name 修复依赖后安装成功。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;软件包 $cleaned_package_name 修复依赖后仍安装失败。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done &lt; &quot;$PACKAGE_LIST&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;脚本运行结束。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、摄像头安装（intel）"><a href="#4、摄像头安装（intel）" class="headerlink" title="4、摄像头安装（intel）"></a>4、摄像头安装（intel）</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
